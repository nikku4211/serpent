vars /serp_vars
    UF px = 12
    UF py = 10
    UF opx = 12
    UF opy = 10
    U[256] psnpx
    U[256] psnpy
    U psnpxbi = 0
    U psnpybi = 0
    SF pvelx = 0
    SF pvely = 0
    U plength = 5
    UF rx = 16
    UF ry = 15
    UF orx = 16
    UF ory = 15
    SF rvelx = 0
    SF rvely = 0
    U score = 0
    Bool lost = false

fn load_level()
    ppu_reset_addr($2000)
    for UU i = 0; i < 960; i += 1
        {PPUDATA}(0)
    for U i = 0; i < 64; i += 1
        {PPUDATA}(%00000000)

fn init_arrays()
    //clear the entire 256-byte array...
    for U i = 0; i < 255; i += 1
        psnpx[i] = 0
    for U i = 0; i < 255; i += 1
        psnpy[i] = 0
    
    //...even the 256th byte
    psnpx[255] = 0
    psnpy[255] = 0

    psnpx[0] = px.a
    psnpy[0] = py.a
    psnpxbi = 1
    psnpybi = 1

nmi main_nmi()
    //update oam and poll controller presses
    ppu_upload_oam_poll_pads(0)

    //turn rendering on
    {PPUMASK}(PPUMASK_ON | PPUMASK_NO_CLIP)

    update_bkg()

    //reset scroll
    ppu_reset_scroll(0, 0)

mode main()
: nmi main_nmi
    // upload palette
    palette = example_palette
    ppu_upload_palette()

    // load the level
    load_level()

    init_arrays()

    set_rat()

    // Clear the remainder of OAM
    hide_oam(0)

    // have NMI on every frame
    {PPUCTRL}(PPUCTRL_NMI_ON)

    while true
        update_pads()
        move_player()
        //move_rat()
        eat_check()
        ouro_check()
        if plength == 64
            goto mode win()
            : preserves
        nmi

nmi win_nmi()
    //update oam and poll controller presses
    ppu_upload_oam_poll_pads(0)

    //turn rendering on
    {PPUMASK}(PPUMASK_ON | PPUMASK_NO_CLIP)

    //reset scroll
    ppu_reset_scroll(0, 0)

mode win()
: nmi win_nmi

    load_level()

    while true

fn update_bkg()
    
    //draw a black space over the old rat on the background
    //ppu_set_addr($2000+(UU(ory.a)<<5)+UU(orx.a))
    //{PPUDATA}(0)

    //draw the snake head on the background
    ppu_set_addr($2000+(UU(py.a)<<5)+UU(px.a))
    {PPUDATA}(1)

    //draw a blank space over the snake tail on the background
    ppu_set_addr($2000+(UU(psnpy[psnpybi-plength])<<5)+UU(psnpx[psnpxbi-plength]))
    {PPUDATA}(0)

    //draw the rat on the background
    ppu_set_addr($2000+(UU(ry.a)<<5)+UU(rx.a))
    {PPUDATA}(3)

fn move_player()
    
    opx = px
    opy = py
    
    //move snake head horizontally
    if pads[0].held & BUTTON_LEFT && pvelx <= 0
        pvelx = -0.1
        pvely = 0
    else if pads[0].held & BUTTON_RIGHT && pvelx >= 0
        pvelx = 0.1
        pvely = 0
    //move snake head vertically
    else if pads[0].held & BUTTON_UP && pvely <= 0
        pvely = -0.1
        pvelx = 0
    else if pads[0].held & BUTTON_DOWN && pvely >= 0
        pvely = 0.1
        pvelx = 0

    if pads[0].held & BUTTON_SELECT
        goto mode win()
        : preserves

    //make sure snake is always moving
    px += pvelx
    py += pvely

    //wrap snake around screen
    if py < 2
        py = 28
    else if py > 28
        py = 2
    
    if px < 2
        px = 30
    else if px > 30
        px = 2

    if (px.a != opx.a) || (py.a != opy.a)
        //store head position at turn
        psnpx[psnpxbi] = px.a
        psnpy[psnpybi] = py.a
        //increment snake buffer index
        psnpxbi += 1
        psnpybi += 1

fn set_rat()
    //set the old rat position
    //orx = rx
    //ory = ry

    //put rat in random place
    rx = randb(28)
    ry = randb(26)

    //in bounds
    rx += 2
    ry += 2

fn move_rat()
    //TBD

fn eat_check()
    if px.a == rx.a && py.a == ry.a
        score += 1
        plength += 1
        set_rat()

fn ouro_check()
    for U i = psnpy[psnpybi-plength]; i < psnpy[psnpybi-4]; i += 1
        for U j = psnpx[psnpxbi-plength]; j < psnpx[psnpxbi-4]; j += 1
            if px.a == psnpx[j] && py.a == psnpy[i]
                lost = true
    
    if lost = true
        goto mode lose()
        : preserves

mode lose()
    while true

// Define the tileset (commonly called CHR):
chrrom
    file(fmt, "serchr.png")